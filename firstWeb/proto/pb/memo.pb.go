// Code generated by protoc-gen-go.
// source: memo.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sync "sync"
import gob "encoding/gob"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TMemo struct {
	ID               *string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	CreatedAt        *string `protobuf:"bytes,2,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	Text             *string `protobuf:"bytes,3,opt,name=Text" json:"Text,omitempty"`
	Message          *string `protobuf:"bytes,4,opt,name=Message" json:"Message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

var gTMemoDummy TMemo
var poolTMemo = sync.Pool{
	New: func() interface{} {
		return new(TMemo)
	},
}

func NewTMemo() *TMemo {
	obj := poolTMemo.Get().(*TMemo)
	obj.Reset()
	return obj
}
func (m *TMemo) Put() {
	poolTMemo.Put(m)
}
func (m *TMemo) Reset()         { *m = gTMemoDummy }
func (m *TMemo) String() string { return proto.CompactTextString(m) }
func (*TMemo) ProtoMessage()    {}

func (m *TMemo) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *TMemo) SetID(v string) {
	if m != nil {
		if m.ID != nil {
			*m.ID = v
		} else {
			m.ID = &v
		}
	}
}

func (m *TMemo) GetCreatedAt() string {
	if m != nil && m.CreatedAt != nil {
		return *m.CreatedAt
	}
	return ""
}

func (m *TMemo) SetCreatedAt(v string) {
	if m != nil {
		if m.CreatedAt != nil {
			*m.CreatedAt = v
		} else {
			m.CreatedAt = &v
		}
	}
}

func (m *TMemo) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *TMemo) SetText(v string) {
	if m != nil {
		if m.Text != nil {
			*m.Text = v
		} else {
			m.Text = &v
		}
	}
}

func (m *TMemo) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TMemo) SetMessage(v string) {
	if m != nil {
		if m.Message != nil {
			*m.Message = v
		} else {
			m.Message = &v
		}
	}
}

type TMemoList struct {
	Memos            []*TMemo `protobuf:"bytes,1,rep,name=memos" json:"memos,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

var gTMemoListDummy TMemoList
var poolTMemoList = sync.Pool{
	New: func() interface{} {
		return new(TMemoList)
	},
}

func NewTMemoList() *TMemoList {
	obj := poolTMemoList.Get().(*TMemoList)
	obj.Reset()
	return obj
}
func (m *TMemoList) Put() {
	for _, p := range m.Memos {
		p.Put()
	}
	poolTMemoList.Put(m)
}
func (m *TMemoList) Reset()         { *m = gTMemoListDummy }
func (m *TMemoList) String() string { return proto.CompactTextString(m) }
func (*TMemoList) ProtoMessage()    {}

func (m *TMemoList) GetMemos() []*TMemo {
	if m != nil {
		return m.Memos
	}
	return nil
}

func (m *TMemoList) AddMemos(v *TMemo) {
	if m != nil {
		m.Memos = append(m.Memos, v)
	}
}

func init() {
	proto.RegisterType((*TMemo)(nil), "pb.TMemo")
	gob.Register((*TMemo)(nil))
	proto.RegisterType((*TMemoList)(nil), "pb.TMemoList")
	gob.Register((*TMemoList)(nil))
}
